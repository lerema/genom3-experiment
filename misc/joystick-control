#!/usr/bin/env python3
"""Joystick control for the drone"""
import os

import genomix
import argparse

arg = argparse.ArgumentParser()
arg.add_argument(
    "robot_id",
    help="The robot id of the drone. This is used to load the correct lib. Default is 0 for no suffix",
    type=int,
    default=0,
)
arg.add_argument(
    "-d",
    "--device",
    help="The name of the joystick device. This is used to read the joystick input",
    type=str,
    default="Logitech",
)

arg.add_argument(
    "--fixed",
    help="Use this flag to use the fixed velocity command. This is used to read the joystick input",
    action="store_true",
)

# access the optional argument using args.optional_arg
args = arg.parse_args()

suffix = ""
joystick_device = args.device
use_fixed = args.fixed
vmax, wmax = 1.0, 1.0
fixed_velocity = 0.1

if args.robot_id != 0:
    suffix = str(args.robot_id)

LIB_PATH = os.environ.get("DRONE_VV_PATH")
handle = genomix.connect("localhost:8080")

handle.rpath(f"{LIB_PATH}/lib/genom/pocolibs/plugins")
handle.rpath("/opt/openrobots/lib/genom/pocolibs/plugins")
joystick = handle.load(
    "joystick.so",
)
rotorcraft = handle.load("rotorcraft.so", "-i", f"rotorcraft{suffix}")
maneuver = handle.load("maneuver.so", "-i", f"maneuver{suffix}")

maneuver.set_velocity_limit(
    v=vmax,  # m/s
    w=wmax,  # rad/s
)

help_text = """\033[1m
This script will help you control the drone using a joystick.

The controls are as follows:

    RT/LT: Always press to accept any commands
    B: Kill switch for drone. (rotorcraft.stop)
    A: Start the drone
    LUP: Move the drone along z axis
    LDOWN: Move the drone along z axis
    LTOGG_X: Move the drone along x axis
    LTOGG_Y: Move the drone along y axis
    RTOGG_X: Rotate the drone along x axis
    RTOGG_Y: Rotate the drone along y axis

\033[0m
"""


def get_keymap(key_map, reset=False) -> dict:
    """Convert the keymap from the joystick to a more readable format"""

    # Default mode key mapping
    # {'device': {'ts': {'sec': 1691657401, 'nsec': 387744000}, 'buttons': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'axes': [0, 0, 0, 0, 0, 0, 0, 0]}}
    # {'device': {'ts': {'sec': 1691657401, 'nsec': 387744000}, 'buttons': [A, B, X, Y, LB, RB, back, start, 0, 0, 0], 'axes': [LLT/LRT, LUP/DOWN, LT, RGY, RGX, RT, LGX, LGY]}}

    # TODO: Check if there is a way to check which mode is active
    if reset:
        new_key_map = {
            "A": 0,
            "B": 0,
            "X": 0,
            "Y": 0,
            "LB": 0,
            "RB": 0,
            "back": 0,
            "start": 0,
            "LT": 0,
            "RT": 0,
            "LUP": 0,
            "LDOWN": 0,
            "LLEFT": 0,
            "LRIGHT": 0,
            "RTOGG_X": 0,
            "RTOGG_Y": 0,
            "LTOGG_X": 0,
            "LTOGG_Y": 0,
        }

        return new_key_map

    new_key_map = {}
    new_key_map["A"] = key_map["device"]["buttons"][0]
    new_key_map["B"] = key_map["device"]["buttons"][1]
    new_key_map["X"] = key_map["device"]["buttons"][2]
    new_key_map["Y"] = key_map["device"]["buttons"][3]
    new_key_map["LB"] = key_map["device"]["buttons"][4]
    new_key_map["RB"] = key_map["device"]["buttons"][5]
    new_key_map["back"] = key_map["device"]["buttons"][6]
    new_key_map["start"] = key_map["device"]["buttons"][7]
    new_key_map["LT"] = key_map["device"]["axes"][2]
    new_key_map["RT"] = key_map["device"]["axes"][5]
    new_key_map["LUP"] = key_map["device"]["axes"][1]
    new_key_map["LDOWN"] = key_map["device"]["axes"][1]
    new_key_map["LLEFT"] = key_map["device"]["axes"][0]
    new_key_map["LRIGHT"] = key_map["device"]["axes"][0]
    new_key_map["RTOGG_X"] = key_map["device"]["axes"][4]
    new_key_map["RTOGG_Y"] = key_map["device"]["axes"][3]
    new_key_map["LTOGG_X"] = key_map["device"]["axes"][6]
    new_key_map["LTOGG_Y"] = key_map["device"]["axes"][7]

    return new_key_map


def accept_fixed_commands():
    """Accept commands from the joystick"""
    print(help_text)
    print("Ready to receive joystick commands", end="\r")
    try:
        while True:
            key_map = joystick.device(joystick_device)
            key_map = get_keymap(key_map)
            if key_map["B"]:
                # Stop the drone
                print("Trying to stop" + " " * 20, end="\r")
                rotorcraft.stop()

            if (key_map["RT"] > 0) or (key_map["LT"] > 0):
                # Process command
                print("Processing command" + " " * 20, end="\r")
                if key_map["LUP"] < -10000:
                    # Move the drone along z axis
                    maneuver.velocity(
                        vx=0, vy=0, vz=fixed_velocity, wz=0, ax=0, ay=0, az=0.1, duration=0
                    )
                elif key_map["LDOWN"] > 10000:
                    maneuver.velocity(
                        vx=0, vy=0, vz=-fixed_velocity, wz=0, ax=0, ay=0, az=-0.1, duration=0
                    )
                elif key_map["LTOGG_X"] > 10000:
                    maneuver.velocity(
                        vx=-fixed_velocity, vy=0, vz=0, wz=0, ax=0.1, ay=0, az=0, duration=0
                    )
                elif key_map["LTOGG_X"] < -10000:
                    maneuver.velocity(
                        vx=fixed_velocity, vy=0, vz=0, wz=0, ax=-0.1, ay=0, az=0, duration=0
                    )
                elif key_map["LTOGG_Y"] > 10000:
                    maneuver.velocity(
                        vx=0, vy=-fixed_velocity, vz=0, wz=0, ax=0, ay=0.1, az=0, duration=0
                    )
                elif key_map["LTOGG_Y"] < -10000:
                    maneuver.velocity(
                        vx=0, vy=+fixed_velocity, vz=0, wz=0, ax=0, ay=-0.1, az=0, duration=0
                    )
                elif key_map["RTOGG_Y"] > 10000:
                    maneuver.velocity(
                        vx=0, vy=0, vz=0, wz=-fixed_velocity, ax=0, ay=0, az=0.1, duration=0
                    )
                elif key_map["RTOGG_Y"] < -10000:
                    maneuver.velocity(
                        vx=0, vy=0, vz=0, wz=fixed_velocity, ax=0, ay=0, az=-0.1, duration=0
                    )
                else:
                    maneuver.velocity(
                        vx=0, vy=0, vz=0, wz=0, ax=0, ay=0, az=0, duration=0
                    )

            else:
                print("Press RT or LT to accept commands", end="\r")
    except KeyboardInterrupt:
        print("Keyboard interrupt detected. Exiting...")


def sign(x):
    """Get the sign of the number"""
    if x < 0:
        return -1
    else:
        return 1


def map_values(value, in_min, in_max, out_min, out_max):
    """Map the value from one range to another"""
    value = sign(value) * value**2
    in_min = sign(in_min) * in_min**2
    in_max = sign(in_max) * in_max**2
    return (value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min


def accept_command():
    """Accept commands from the joystick"""
    print(help_text)
    print("Ready to receive joystick commands", end="\r")
    try:
        while True:
            key_map = joystick.device(joystick_device)
            key_map = get_keymap(key_map)
            if key_map["B"]:
                # Stop the drone
                print("Trying to stop" + " " * 20, end="\r")
                rotorcraft.stop()

            if key_map["A"]:
                # Stay in the air
                maneuver.velocity(vx=0, vy=0, vz=0, wz=0, ax=0, ay=0, az=0, duration=0)

            if (key_map["RT"] > 0) or (key_map["LT"] > 0):
                # Process command
                print("Processing command" + " " * 20, end="\r")
                if key_map["LUP"] < -10000:
                    # Move the drone along z axis
                    maneuver.velocity(
                        vx=0, vy=0, vz=0.1, wz=0, ax=0, ay=0, az=0.1, duration=0
                    )
                elif key_map["LDOWN"] > 10000:
                    maneuver.velocity(
                        vx=0, vy=0, vz=-0.1, wz=0, ax=0, ay=0, az=-0.1, duration=0
                    )
                elif key_map["LTOGG_X"]:
                    value = map_values(key_map["LTOGG_X"], 32767, -32767, -vmax, vmax)
                    maneuver.velocity(
                        vx=value, vy=0, vz=0, wz=0, ax=0, ay=0, az=0, duration=0
                    )
                elif key_map["LTOGG_Y"]:
                    value = map_values(key_map["LTOGG_Y"], 32767, -32767, -vmax, vmax)
                    maneuver.velocity(
                        vx=0, vy=value, vz=0, wz=0, ax=0, ay=0, az=0, duration=0
                    )
                elif key_map["RTOGG_Y"]:
                    value = map_values(key_map["RTOGG_Y"], 32767, -32767, -wmax, wmax)
                    maneuver.velocity(
                        vx=0, vy=0, vz=0, wz=value, ax=0, ay=0, az=0, duration=0
                    )
                else:
                    maneuver.velocity(
                        vx=0, vy=0, vz=0, wz=0, ax=0, ay=0, az=0, duration=0
                    )
            else:
                print("Press RT or LT to accept commands", end="\r")
    except KeyboardInterrupt:
        print("Keyboard interrupt detected. Exiting...")


if __name__ == "__main__":
    if use_fixed:
        accept_fixed_commands()
    else:
        accept_command()
